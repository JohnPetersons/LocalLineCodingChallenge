/*
* Local Line Coding Challenge
* John Petersons
* 
* A sit that loads a list of businesses into a list.
* Made with React.
* Functions are not created when components are rendered; no {() => functionName()}.
*/

import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';

import './index.css';
import { APICall } from './util';

/*
* MyList
*
* Takes in a list of businesses, a name for the list, and a number of businesses per page and 
* produces a list of businesses with the options to view more details on them and to remove them 
* from the list.
*/
class MyList extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			items: this.props.items,
			itemsPerPage: this.props.itemsPerPage,
			pageNumber: 1,
			lastPage: (this.props.itemsPerPage >= this.props.items.length)
		};
	}
/*
* Uses the Promise generated by the APICall function to populate the data.
* Requirement for the coding challenge.
*/
	componentDidMount() {
		APICall().then((res) => { 
			this.setState({
				items: res
			});
		});
	}

	getListItem(item) {
		return <ListItem  key={item.business_name} item={item} remove={this.removeFromList}/>;
	}

	changePage(i) {
		this.setState({
			pageNumber: Math.max(1, i),
			lastPage: (i * this.state.itemsPerPage >= this.props.items.length)
		});
	}

	previousPage = () => {
		this.changePage(this.state.pageNumber - 1);
	} 

	nextPage = () => {
		this.changePage(this.state.pageNumber + 1);
	}

/*
* removeFromList(item)
*
* Removes an item from the list using setState and then lets render() show the new list.
* Also shifts the page back one if the page no longer has any items on it.
*/
	removeFromList = (item) => {
		this.setState({
			items: this.state.items.slice(0, this.state.items.indexOf(item)).concat(this.state.items.slice(this.state.items.indexOf(item) + 1, this.state.items.length)),
			pageNumber: ((this.state.pageNumber - 1) * this.state.itemsPerPage >= this.state.items.length - 1)? 
				Math.max(1, this.state.pageNumber - 1) : this.state.pageNumber,
			lastPage: (this.state.pageNumber * this.state.itemsPerPage >= this.state.items.length - 1)
		});
	}

/*
* render()
*
* Figures out which items to show when it is rendered instead of storing a list of what should be rendered in the state.
* Keep everything about rendering in render().
*/

	render() {
		const {
			items,
			pageNumber,
			itemsPerPage,
			lastPage
		} = this.state;
		return (
			<ul className="myList">
				<li><div className="flex autoMargin"><h1>{this.props.name}</h1></div></li>
				{items.length === 0?
					<li><div className="flex center autoMargin">Loading...</div></li>:
					items.slice(Math.max(0, (pageNumber - 1) * itemsPerPage), 
					Math.max(itemsPerPage, pageNumber * itemsPerPage)).map((item) => this.getListItem(item))}
				<li><div className="flex"></div>
					<div className="autoMargin">
						<button className="pageButton" disabled={pageNumber === 1} onClick={ this.previousPage }>&lt;</button>
						<input className="pageNumber" type="number" readOnly value={pageNumber}/>
						<button className="pageButton" disabled={lastPage} onClick={ this.nextPage }>&gt;</button>
					</div>
				</li>
			</ul>
		);
	}
}
/*
* MyList.propTypes
*
* Requirements for props.items based on the JSON object in util.js.
*/
MyList.propTypes = {
	items: PropTypes.arrayOf(
		PropTypes.shape({
			business_name: PropTypes.string,
			province: PropTypes.string,
			city: PropTypes.string,
			country: PropTypes.string,
			customer_info: PropTypes.shape({
				last_deliver_date: PropTypes.string,
				orders_this_month: PropTypes.number,
				buyer_average_order: PropTypes.number
			})
		})
	),
	itemsPerPage: PropTypes.number,
	name: PropTypes.string
};

/*
* ListItem
*
* Contains the button to remove itself from the MyList, the Popup associated with the ListItem, and the button to view the popup.
* The button to remove itself calls the remove function passed to it by the MyList.
*/
class ListItem extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			item: this.props.item,
			popup: "hiddenPopup"
		};
	}

	showPopup = () => {
		this.setState({
			popup: "visiblePopup"
		});
	}
	closePopup = () => {
		this.setState({
			popup: "hiddenPopup"
		});
	}

	removeListItem = () => {
		this.props.remove(this.state.item);
	}

/*
* render()
*
* The svg tag displays a circle missing an X in the middle.
*/
	render() {
		const {
			business_name,
			city,
			province
		} = this.state.item;
		return (
			<li>
				<div className="flex autoMargin">
					<h2>{business_name}</h2>
					<p>{city}, {province}</p>
				</div>
				<div className="center autoMargin">
					<button className="view" onClick={ this.showPopup }>View</button>
					<button className="remove" onClick={ this.removeListItem }>
						<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
							<path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z" fill="#646464"/>
							<path d="M0 0h24v24H0z" fill="none"/>
						</svg>
					</button>
					<Popup item={this.state.item} popup={this.state.popup} close={ this.closePopup }/>
				</div>
			</li>
		);
	}
}

ListItem.propTypes = {
	remove: PropTypes.func
};

class Popup extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			item: this.props.item
		};
	}
	
	closePopup = () => {
		this.props.close();
	}

/*
* render()
*
* Some of the options that were visible in the screenshots did not have corresponding data from the customers JSON object in util.js
* which has resulted in a few guesses as to what the names would be.  These fields have been marked with a placeholder comment.
* The svg tag displays an X.
* The buttons "Send Catalog" and "Add Note" currently do nothing.
*/	
	render() {
		const {
			business_name,
			city,
			province,
			phone,
			catalog,
			customer_info
		} = this.state.item;
		const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
		return (
			<div className={this.props.popup}>
				<div className="darken" onClick={ this.closePopup }></div>
				<div className="popup autoMargin">
					<table className="popupTable"><tbody>
						<tr>
							<td>
								<h3>{business_name}</h3>
							</td>
							<td>
								<div className="close autoMargin">
									<button className="close" onClick={ this.closePopup }>
										<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
											<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" fill="#516fb7"/>
											<path d="M0 0h24v24H0z" fill="none"/>
										</svg>
									</button>
								</div>
							</td>
						</tr>
						<tr>
							<td>
								<p>Location</p>
								<p>{city}, {province}</p>
							</td>
							<td>
								<p>Phone</p>
								<p>{phone?phone:"N/A"}</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Product Catalog</p>
								<select>
									<option value="">Select a Catalog</option>
									{/* placeholder */}
									{catalog? catalog.map((option) => <option value={option}>{option}</option>):null}
								</select>
							</td>
							<td>
								<p>Last Delivery</p>
								<p>{customer_info.last_delivery_date? (new Date(customer_info.last_delivery_date)).toDateString(): "N/A"}</p>
							</td>
						</tr>
						<tr>
							<td>
								<button className="catalog">Send Catalog</button>
							</td>
							<td>
								<button className="note">Add Note</button>
							</td>
						</tr>
						<tr>
							<td>
								<p>Average Order</p>
								<p>{customer_info.buyer_average_order? "$" + customer_info.buyer_average_order.toFixed(2): "$0.00"}</p>
							</td>
							<td>
								<p>{months[(new Date(Date.now())).getMonth()]} Orders</p>
								<p>{customer_info.orders_this_month? customer_info.orders_this_month: "0"}</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>{months[(new Date(Date.now())).getMonth()]} Sales</p>
								{/* placeholder */}
								<p>{customer_info.sales_this_month? customer_info.sales_this_month: "0"}</p>
							</td>
							<td>
								<p>Total Sales</p>
								{/* placeholder */}
								<p>{customer_info.orders_total? "$" + customer_info.orders_total.toFixed(2): customer_info.orders_this_month? "$" + customer_info.orders_this_month.toFixed(2): "$0.00"}</p>
							</td>
						</tr>
					</tbody></table>
				</div>
			</div>
		);
	}
}

Popup.propTypes = {
	popup: PropTypes.string,
	close: PropTypes.func
};

/*
* Page
*
* itemsPerPage is set at 4 because that was the number of items visible in the screenshot.
*/
class Page extends React.Component {
	render() {
		return <MyList name="My Customers" items={this.props.data} itemsPerPage={4}/>;
	}
}
ReactDOM.render(
	<Page data={[]}/>,
	document.getElementById("root")
);
